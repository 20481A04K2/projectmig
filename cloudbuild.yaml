steps:
  # Step 0: Generate VERSION_TAG and write to version.env
  - name: 'bash'
    id: 'Generate Version Tag'
    entrypoint: bash
    args:
      - -c
      - |
        VERSION_TAG=$$(date +%Y%m%d%H%M%S)
        echo "VERSION_TAG=$${VERSION_TAG}" > /workspace/version.env
        cat /workspace/version.env

  # Step 1: Create instance template with updated startup script
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Create Instance Template'
    entrypoint: 'bash'
    args:
      - -c
      - |
        source /workspace/version.env
        echo "üõ†Ô∏è Creating instance template prod-template-$$VERSION_TAG"
        gcloud compute instance-templates create prod-template-$$VERSION_TAG \
          --project=sylvan-hydra-464904-d9 \
          --machine-type=e2-medium \
          --region=asia-east1 \
          --network=default \
          --tags=http-server \
          --metadata=startup-script='#!/bin/bash
          echo "üîÅ Starting VM setup..."
          apt-get update
          apt-get install -y unzip python3-venv python3-pip
          mkdir -p /opt/app
          gsutil cp gs://bitbucketgcsmig/projectmig.zip /opt/app/source.zip
          cd /opt/app
          unzip source.zip -d .
          python3 -m venv venv
          source venv/bin/activate
          pip install flask
          nohup python3 app.py --host=0.0.0.0 --port=8080 > /opt/app/app.log 2>&1 &'

  # Step 2: Create firewall rule for port 8080
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Create Firewall Rule'
    entrypoint: 'bash'
    args:
      - -c
      - |
        echo "üîê Creating firewall rule..."
        gcloud compute firewall-rules create allow-8080 \
          --project=sylvan-hydra-464904-d9 \
          --allow tcp:8080 \
          --target-tags=http-server \
          --direction=INGRESS \
          --priority=1000 || echo "‚ö†Ô∏è Firewall may already exist"

  # Step 3: Create health check
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Create Health Check'
    entrypoint: 'bash'
    args:
      - -c
      - |
        echo "‚ù§Ô∏è Creating health check..."
        gcloud compute health-checks create http vamsi-health-check \
          --project=sylvan-hydra-464904-d9 \
          --port=8080 || echo "‚ö†Ô∏è Health check may already exist"

  # Step 4: Create or update MIG
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Create or Update MIG'
    entrypoint: 'bash'
    args:
      - -c
      - |
        source /workspace/version.env
        echo "üì¶ Checking or creating MIG with template prod-template-$$VERSION_TAG"
        if ! gcloud compute instance-groups managed describe prod-mig --region=asia-east1 > /dev/null 2>&1; then
          echo "üî® Creating new MIG..."
          gcloud compute instance-groups managed create prod-mig \
            --project=sylvan-hydra-464904-d9 \
            --region=asia-east1 \
            --size=1 \
            --template=prod-template-$$VERSION_TAG \
            --target-distribution-shape=EVEN
        else
          echo "‚ôªÔ∏è Updating MIG with new template..."
          gcloud compute instance-groups managed set-instance-template prod-mig \
            --region=asia-east1 \
            --template=prod-template-$$VERSION_TAG
          echo "üîÅ Performing rolling restart..."
          gcloud compute instance-groups managed rolling-action restart prod-mig \
            --region=asia-east1
        fi

timeout: 1200s

options:
  logging: CLOUD_LOGGING_ONLY
